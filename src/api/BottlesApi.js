/*
 * Snippet
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HTTPValidationError} from '../model/HTTPValidationError';
import {Message} from '../model/Message';
import {MessageResponseForm} from '../model/MessageResponseForm';
import {MessageSendForm} from '../model/MessageSendForm';

/**
* Bottles service.
* @module api/BottlesApi
* @version 0.1.0
*/
export class BottlesApi {

    /**
    * Constructs a new BottlesApi. 
    * @alias module:api/BottlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the readMyMessagesBottlesMyMessagesGet operation.
     * @callback moduleapi/BottlesApi~readMyMessagesBottlesMyMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read My Messages
     * @param {Object} opts Optional parameters
     * @param {Number} opts.skip  (default to <.>)
     * @param {Number} opts.limit  (default to <.>)
     * @param {module:api/BottlesApi~readMyMessagesBottlesMyMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readMyMessagesBottlesMyMessagesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'skip': opts['skip'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Message];

      return this.apiClient.callApi(
        '/bottles/my-messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the receiveMessageBottlesReceiveGet operation.
     * @callback moduleapi/BottlesApi~receiveMessageBottlesReceiveGetCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Receive Message
     * @param {module:api/BottlesApi~receiveMessageBottlesReceiveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    receiveMessageBottlesReceiveGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/bottles/receive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the respondToMessageBottlesRespondPost operation.
     * @callback moduleapi/BottlesApi~respondToMessageBottlesRespondPostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Respond To Message
     * @param {module:model/MessageResponseForm} body 
     * @param {module:api/BottlesApi~respondToMessageBottlesRespondPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    respondToMessageBottlesRespondPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling respondToMessageBottlesRespondPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/bottles/respond', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendMessageBottlesSendPost operation.
     * @callback moduleapi/BottlesApi~sendMessageBottlesSendPostCallback
     * @param {String} error Error message, if any.
     * @param {Object{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Message
     * @param {module:model/MessageSendForm} body 
     * @param {module:api/BottlesApi~sendMessageBottlesSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendMessageBottlesSendPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMessageBottlesSendPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/bottles/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}