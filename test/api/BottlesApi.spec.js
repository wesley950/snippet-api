/*
 * Snippet
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Snippet);
  }
}(this, function(expect, Snippet) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Snippet.BottlesApi();
  });

  describe('(package)', function() {
    describe('BottlesApi', function() {
      describe('readMyMessagesBottlesMyMessagesGet', function() {
        it('should call readMyMessagesBottlesMyMessagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for readMyMessagesBottlesMyMessagesGet call and complete the assertions
          /*
          var opts = {};

          instance.readMyMessagesBottlesMyMessagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Snippet.Message);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('receiveMessageBottlesReceiveGet', function() {
        it('should call receiveMessageBottlesReceiveGet successfully', function(done) {
          // TODO: uncomment receiveMessageBottlesReceiveGet call and complete the assertions
          /*

          instance.receiveMessageBottlesReceiveGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('respondToMessageBottlesRespondPost', function() {
        it('should call respondToMessageBottlesRespondPost successfully', function(done) {
          // TODO: uncomment, update parameter values for respondToMessageBottlesRespondPost call and complete the assertions
          /*

          instance.respondToMessageBottlesRespondPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendMessageBottlesSendPost', function() {
        it('should call sendMessageBottlesSendPost successfully', function(done) {
          // TODO: uncomment, update parameter values for sendMessageBottlesSendPost call and complete the assertions
          /*

          instance.sendMessageBottlesSendPost(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
